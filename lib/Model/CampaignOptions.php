<?php
/**
 * CampaignOptions
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  ElasticEmail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ElasticEmail\Model;

use \ArrayAccess;
use \ElasticEmail\ObjectSerializer;

/**
 * CampaignOptions Class Doc Comment
 *
 * @category Class
 * @description Different send options for a Campaign
 * @package  ElasticEmail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CampaignOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CampaignOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'delivery_optimization' => '\ElasticEmail\Model\DeliveryOptimizationType',
        'track_opens' => 'bool',
        'track_clicks' => 'bool',
        'schedule_for' => '\DateTime',
        'split_options' => '\ElasticEmail\Model\SplitOptions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'delivery_optimization' => null,
        'track_opens' => 'boolean',
        'track_clicks' => 'boolean',
        'schedule_for' => 'date-time',
        'split_options' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delivery_optimization' => 'DeliveryOptimization',
        'track_opens' => 'TrackOpens',
        'track_clicks' => 'TrackClicks',
        'schedule_for' => 'ScheduleFor',
        'split_options' => 'SplitOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delivery_optimization' => 'setDeliveryOptimization',
        'track_opens' => 'setTrackOpens',
        'track_clicks' => 'setTrackClicks',
        'schedule_for' => 'setScheduleFor',
        'split_options' => 'setSplitOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delivery_optimization' => 'getDeliveryOptimization',
        'track_opens' => 'getTrackOpens',
        'track_clicks' => 'getTrackClicks',
        'schedule_for' => 'getScheduleFor',
        'split_options' => 'getSplitOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['delivery_optimization'] = $data['delivery_optimization'] ?? null;
        $this->container['track_opens'] = $data['track_opens'] ?? null;
        $this->container['track_clicks'] = $data['track_clicks'] ?? null;
        $this->container['schedule_for'] = $data['schedule_for'] ?? null;
        $this->container['split_options'] = $data['split_options'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delivery_optimization
     *
     * @return \ElasticEmail\Model\DeliveryOptimizationType|null
     */
    public function getDeliveryOptimization()
    {
        return $this->container['delivery_optimization'];
    }

    /**
     * Sets delivery_optimization
     *
     * @param \ElasticEmail\Model\DeliveryOptimizationType|null $delivery_optimization delivery_optimization
     *
     * @return self
     */
    public function setDeliveryOptimization($delivery_optimization)
    {
        $this->container['delivery_optimization'] = $delivery_optimization;

        return $this;
    }

    /**
     * Gets track_opens
     *
     * @return bool|null
     */
    public function getTrackOpens()
    {
        return $this->container['track_opens'];
    }

    /**
     * Sets track_opens
     *
     * @param bool|null $track_opens Should the opens be tracked? If no value has been provided, Account's default setting will be used.
     *
     * @return self
     */
    public function setTrackOpens($track_opens)
    {
        $this->container['track_opens'] = $track_opens;

        return $this;
    }

    /**
     * Gets track_clicks
     *
     * @return bool|null
     */
    public function getTrackClicks()
    {
        return $this->container['track_clicks'];
    }

    /**
     * Sets track_clicks
     *
     * @param bool|null $track_clicks Should the clicks be tracked? If no value has been provided, Account's default setting will be used.
     *
     * @return self
     */
    public function setTrackClicks($track_clicks)
    {
        $this->container['track_clicks'] = $track_clicks;

        return $this;
    }

    /**
     * Gets schedule_for
     *
     * @return \DateTime|null
     */
    public function getScheduleFor()
    {
        return $this->container['schedule_for'];
    }

    /**
     * Sets schedule_for
     *
     * @param \DateTime|null $schedule_for Date when this Campaign is scheduled to be sent on
     *
     * @return self
     */
    public function setScheduleFor($schedule_for)
    {
        $this->container['schedule_for'] = $schedule_for;

        return $this;
    }

    /**
     * Gets split_options
     *
     * @return \ElasticEmail\Model\SplitOptions|null
     */
    public function getSplitOptions()
    {
        return $this->container['split_options'];
    }

    /**
     * Sets split_options
     *
     * @param \ElasticEmail\Model\SplitOptions|null $split_options split_options
     *
     * @return self
     */
    public function setSplitOptions($split_options)
    {
        $this->container['split_options'] = $split_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


