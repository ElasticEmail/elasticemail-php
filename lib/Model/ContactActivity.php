<?php
/**
 * ContactActivity
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  ElasticEmail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ElasticEmail\Model;

use \ArrayAccess;
use \ElasticEmail\ObjectSerializer;

/**
 * ContactActivity Class Doc Comment
 *
 * @category Class
 * @package  ElasticEmail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ContactActivity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContactActivity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_sent' => 'int',
        'total_opened' => 'int',
        'total_clicked' => 'int',
        'total_failed' => 'int',
        'last_sent' => '\DateTime',
        'last_opened' => '\DateTime',
        'last_clicked' => '\DateTime',
        'last_failed' => '\DateTime',
        'last_ip' => 'string',
        'error_code' => 'int',
        'friendly_error_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_sent' => 'int32',
        'total_opened' => 'int32',
        'total_clicked' => 'int32',
        'total_failed' => 'int32',
        'last_sent' => 'date-time',
        'last_opened' => 'date-time',
        'last_clicked' => 'date-time',
        'last_failed' => 'date-time',
        'last_ip' => 'string',
        'error_code' => 'int32',
        'friendly_error_message' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_sent' => 'TotalSent',
        'total_opened' => 'TotalOpened',
        'total_clicked' => 'TotalClicked',
        'total_failed' => 'TotalFailed',
        'last_sent' => 'LastSent',
        'last_opened' => 'LastOpened',
        'last_clicked' => 'LastClicked',
        'last_failed' => 'LastFailed',
        'last_ip' => 'LastIP',
        'error_code' => 'ErrorCode',
        'friendly_error_message' => 'FriendlyErrorMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_sent' => 'setTotalSent',
        'total_opened' => 'setTotalOpened',
        'total_clicked' => 'setTotalClicked',
        'total_failed' => 'setTotalFailed',
        'last_sent' => 'setLastSent',
        'last_opened' => 'setLastOpened',
        'last_clicked' => 'setLastClicked',
        'last_failed' => 'setLastFailed',
        'last_ip' => 'setLastIp',
        'error_code' => 'setErrorCode',
        'friendly_error_message' => 'setFriendlyErrorMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_sent' => 'getTotalSent',
        'total_opened' => 'getTotalOpened',
        'total_clicked' => 'getTotalClicked',
        'total_failed' => 'getTotalFailed',
        'last_sent' => 'getLastSent',
        'last_opened' => 'getLastOpened',
        'last_clicked' => 'getLastClicked',
        'last_failed' => 'getLastFailed',
        'last_ip' => 'getLastIp',
        'error_code' => 'getErrorCode',
        'friendly_error_message' => 'getFriendlyErrorMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_sent'] = $data['total_sent'] ?? null;
        $this->container['total_opened'] = $data['total_opened'] ?? null;
        $this->container['total_clicked'] = $data['total_clicked'] ?? null;
        $this->container['total_failed'] = $data['total_failed'] ?? null;
        $this->container['last_sent'] = $data['last_sent'] ?? null;
        $this->container['last_opened'] = $data['last_opened'] ?? null;
        $this->container['last_clicked'] = $data['last_clicked'] ?? null;
        $this->container['last_failed'] = $data['last_failed'] ?? null;
        $this->container['last_ip'] = $data['last_ip'] ?? null;
        $this->container['error_code'] = $data['error_code'] ?? null;
        $this->container['friendly_error_message'] = $data['friendly_error_message'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_sent
     *
     * @return int|null
     */
    public function getTotalSent()
    {
        return $this->container['total_sent'];
    }

    /**
     * Sets total_sent
     *
     * @param int|null $total_sent Total emails sent.
     *
     * @return self
     */
    public function setTotalSent($total_sent)
    {
        $this->container['total_sent'] = $total_sent;

        return $this;
    }

    /**
     * Gets total_opened
     *
     * @return int|null
     */
    public function getTotalOpened()
    {
        return $this->container['total_opened'];
    }

    /**
     * Sets total_opened
     *
     * @param int|null $total_opened Total emails opened.
     *
     * @return self
     */
    public function setTotalOpened($total_opened)
    {
        $this->container['total_opened'] = $total_opened;

        return $this;
    }

    /**
     * Gets total_clicked
     *
     * @return int|null
     */
    public function getTotalClicked()
    {
        return $this->container['total_clicked'];
    }

    /**
     * Sets total_clicked
     *
     * @param int|null $total_clicked Total emails clicked
     *
     * @return self
     */
    public function setTotalClicked($total_clicked)
    {
        $this->container['total_clicked'] = $total_clicked;

        return $this;
    }

    /**
     * Gets total_failed
     *
     * @return int|null
     */
    public function getTotalFailed()
    {
        return $this->container['total_failed'];
    }

    /**
     * Sets total_failed
     *
     * @param int|null $total_failed Total emails failed.
     *
     * @return self
     */
    public function setTotalFailed($total_failed)
    {
        $this->container['total_failed'] = $total_failed;

        return $this;
    }

    /**
     * Gets last_sent
     *
     * @return \DateTime|null
     */
    public function getLastSent()
    {
        return $this->container['last_sent'];
    }

    /**
     * Sets last_sent
     *
     * @param \DateTime|null $last_sent Last date when an email was sent to this contact
     *
     * @return self
     */
    public function setLastSent($last_sent)
    {
        $this->container['last_sent'] = $last_sent;

        return $this;
    }

    /**
     * Gets last_opened
     *
     * @return \DateTime|null
     */
    public function getLastOpened()
    {
        return $this->container['last_opened'];
    }

    /**
     * Sets last_opened
     *
     * @param \DateTime|null $last_opened Date this contact last opened an email
     *
     * @return self
     */
    public function setLastOpened($last_opened)
    {
        $this->container['last_opened'] = $last_opened;

        return $this;
    }

    /**
     * Gets last_clicked
     *
     * @return \DateTime|null
     */
    public function getLastClicked()
    {
        return $this->container['last_clicked'];
    }

    /**
     * Sets last_clicked
     *
     * @param \DateTime|null $last_clicked Date this contact last clicked an email
     *
     * @return self
     */
    public function setLastClicked($last_clicked)
    {
        $this->container['last_clicked'] = $last_clicked;

        return $this;
    }

    /**
     * Gets last_failed
     *
     * @return \DateTime|null
     */
    public function getLastFailed()
    {
        return $this->container['last_failed'];
    }

    /**
     * Sets last_failed
     *
     * @param \DateTime|null $last_failed Last date when an email sent to this contact bounced
     *
     * @return self
     */
    public function setLastFailed($last_failed)
    {
        $this->container['last_failed'] = $last_failed;

        return $this;
    }

    /**
     * Gets last_ip
     *
     * @return string|null
     */
    public function getLastIp()
    {
        return $this->container['last_ip'];
    }

    /**
     * Sets last_ip
     *
     * @param string|null $last_ip IP from which this contact opened or clicked their email last time
     *
     * @return self
     */
    public function setLastIp($last_ip)
    {
        $this->container['last_ip'] = $last_ip;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return int|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param int|null $error_code Last RFC Error code if any occurred
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets friendly_error_message
     *
     * @return string|null
     */
    public function getFriendlyErrorMessage()
    {
        return $this->container['friendly_error_message'];
    }

    /**
     * Sets friendly_error_message
     *
     * @param string|null $friendly_error_message Last RFC error message if any occurred
     *
     * @return self
     */
    public function setFriendlyErrorMessage($friendly_error_message)
    {
        $this->container['friendly_error_message'] = $friendly_error_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


