<?php
/**
 * SecurityApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ElasticEmail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ElasticEmail\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ElasticEmail\ApiException;
use ElasticEmail\Configuration;
use ElasticEmail\HeaderSelector;
use ElasticEmail\ObjectSerializer;

/**
 * SecurityApi Class Doc Comment
 *
 * @category Class
 * @package  ElasticEmail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SecurityApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'securityApikeysByNameDelete' => [
            'application/json',
        ],
        'securityApikeysByNameGet' => [
            'application/json',
        ],
        'securityApikeysByNamePut' => [
            'application/json',
        ],
        'securityApikeysGet' => [
            'application/json',
        ],
        'securityApikeysPost' => [
            'application/json',
        ],
        'securitySmtpByNameDelete' => [
            'application/json',
        ],
        'securitySmtpByNameGet' => [
            'application/json',
        ],
        'securitySmtpByNamePut' => [
            'application/json',
        ],
        'securitySmtpGet' => [
            'application/json',
        ],
        'securitySmtpPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation securityApikeysByNameDelete
     *
     * Delete ApiKey
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  string $subaccount Email of the subaccount of which ApiKey should be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNameDelete'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function securityApikeysByNameDelete($name, $subaccount = null, string $contentType = self::contentTypes['securityApikeysByNameDelete'][0])
    {
        $this->securityApikeysByNameDeleteWithHttpInfo($name, $subaccount, $contentType);
    }

    /**
     * Operation securityApikeysByNameDeleteWithHttpInfo
     *
     * Delete ApiKey
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  string $subaccount Email of the subaccount of which ApiKey should be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNameDelete'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function securityApikeysByNameDeleteWithHttpInfo($name, $subaccount = null, string $contentType = self::contentTypes['securityApikeysByNameDelete'][0])
    {
        $request = $this->securityApikeysByNameDeleteRequest($name, $subaccount, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation securityApikeysByNameDeleteAsync
     *
     * Delete ApiKey
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  string $subaccount Email of the subaccount of which ApiKey should be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNameDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityApikeysByNameDeleteAsync($name, $subaccount = null, string $contentType = self::contentTypes['securityApikeysByNameDelete'][0])
    {
        return $this->securityApikeysByNameDeleteAsyncWithHttpInfo($name, $subaccount, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation securityApikeysByNameDeleteAsyncWithHttpInfo
     *
     * Delete ApiKey
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  string $subaccount Email of the subaccount of which ApiKey should be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNameDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityApikeysByNameDeleteAsyncWithHttpInfo($name, $subaccount = null, string $contentType = self::contentTypes['securityApikeysByNameDelete'][0])
    {
        $returnType = '';
        $request = $this->securityApikeysByNameDeleteRequest($name, $subaccount, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'securityApikeysByNameDelete'
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  string $subaccount Email of the subaccount of which ApiKey should be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNameDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function securityApikeysByNameDeleteRequest($name, $subaccount = null, string $contentType = self::contentTypes['securityApikeysByNameDelete'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling securityApikeysByNameDelete'
            );
        }



        $resourcePath = '/security/apikeys/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subaccount,
            'subaccount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation securityApikeysByNameGet
     *
     * Load ApiKey
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  string $subaccount Email of the subaccount of which ApiKey should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNameGet'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ElasticEmail\Model\ApiKey
     */
    public function securityApikeysByNameGet($name, $subaccount = null, string $contentType = self::contentTypes['securityApikeysByNameGet'][0])
    {
        list($response) = $this->securityApikeysByNameGetWithHttpInfo($name, $subaccount, $contentType);
        return $response;
    }

    /**
     * Operation securityApikeysByNameGetWithHttpInfo
     *
     * Load ApiKey
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  string $subaccount Email of the subaccount of which ApiKey should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNameGet'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ElasticEmail\Model\ApiKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function securityApikeysByNameGetWithHttpInfo($name, $subaccount = null, string $contentType = self::contentTypes['securityApikeysByNameGet'][0])
    {
        $request = $this->securityApikeysByNameGetRequest($name, $subaccount, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ElasticEmail\Model\ApiKey' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ElasticEmail\Model\ApiKey' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ElasticEmail\Model\ApiKey', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ElasticEmail\Model\ApiKey';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ElasticEmail\Model\ApiKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation securityApikeysByNameGetAsync
     *
     * Load ApiKey
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  string $subaccount Email of the subaccount of which ApiKey should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityApikeysByNameGetAsync($name, $subaccount = null, string $contentType = self::contentTypes['securityApikeysByNameGet'][0])
    {
        return $this->securityApikeysByNameGetAsyncWithHttpInfo($name, $subaccount, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation securityApikeysByNameGetAsyncWithHttpInfo
     *
     * Load ApiKey
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  string $subaccount Email of the subaccount of which ApiKey should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityApikeysByNameGetAsyncWithHttpInfo($name, $subaccount = null, string $contentType = self::contentTypes['securityApikeysByNameGet'][0])
    {
        $returnType = '\ElasticEmail\Model\ApiKey';
        $request = $this->securityApikeysByNameGetRequest($name, $subaccount, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'securityApikeysByNameGet'
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  string $subaccount Email of the subaccount of which ApiKey should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function securityApikeysByNameGetRequest($name, $subaccount = null, string $contentType = self::contentTypes['securityApikeysByNameGet'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling securityApikeysByNameGet'
            );
        }



        $resourcePath = '/security/apikeys/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subaccount,
            'subaccount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation securityApikeysByNamePut
     *
     * Update ApiKey
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  \ElasticEmail\Model\ApiKeyPayload $api_key_payload api_key_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNamePut'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ElasticEmail\Model\ApiKey
     */
    public function securityApikeysByNamePut($name, $api_key_payload, string $contentType = self::contentTypes['securityApikeysByNamePut'][0])
    {
        list($response) = $this->securityApikeysByNamePutWithHttpInfo($name, $api_key_payload, $contentType);
        return $response;
    }

    /**
     * Operation securityApikeysByNamePutWithHttpInfo
     *
     * Update ApiKey
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  \ElasticEmail\Model\ApiKeyPayload $api_key_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNamePut'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ElasticEmail\Model\ApiKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function securityApikeysByNamePutWithHttpInfo($name, $api_key_payload, string $contentType = self::contentTypes['securityApikeysByNamePut'][0])
    {
        $request = $this->securityApikeysByNamePutRequest($name, $api_key_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ElasticEmail\Model\ApiKey' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ElasticEmail\Model\ApiKey' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ElasticEmail\Model\ApiKey', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ElasticEmail\Model\ApiKey';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ElasticEmail\Model\ApiKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation securityApikeysByNamePutAsync
     *
     * Update ApiKey
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  \ElasticEmail\Model\ApiKeyPayload $api_key_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityApikeysByNamePutAsync($name, $api_key_payload, string $contentType = self::contentTypes['securityApikeysByNamePut'][0])
    {
        return $this->securityApikeysByNamePutAsyncWithHttpInfo($name, $api_key_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation securityApikeysByNamePutAsyncWithHttpInfo
     *
     * Update ApiKey
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  \ElasticEmail\Model\ApiKeyPayload $api_key_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityApikeysByNamePutAsyncWithHttpInfo($name, $api_key_payload, string $contentType = self::contentTypes['securityApikeysByNamePut'][0])
    {
        $returnType = '\ElasticEmail\Model\ApiKey';
        $request = $this->securityApikeysByNamePutRequest($name, $api_key_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'securityApikeysByNamePut'
     *
     * @param  string $name Name of the ApiKey (required)
     * @param  \ElasticEmail\Model\ApiKeyPayload $api_key_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysByNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function securityApikeysByNamePutRequest($name, $api_key_payload, string $contentType = self::contentTypes['securityApikeysByNamePut'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling securityApikeysByNamePut'
            );
        }

        // verify the required parameter 'api_key_payload' is set
        if ($api_key_payload === null || (is_array($api_key_payload) && count($api_key_payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key_payload when calling securityApikeysByNamePut'
            );
        }


        $resourcePath = '/security/apikeys/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_key_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_key_payload));
            } else {
                $httpBody = $api_key_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation securityApikeysGet
     *
     * List ApiKeys
     *
     * @param  string $subaccount Email of the subaccount of which ApiKeys should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysGet'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ElasticEmail\Model\ApiKey[]
     */
    public function securityApikeysGet($subaccount = null, string $contentType = self::contentTypes['securityApikeysGet'][0])
    {
        list($response) = $this->securityApikeysGetWithHttpInfo($subaccount, $contentType);
        return $response;
    }

    /**
     * Operation securityApikeysGetWithHttpInfo
     *
     * List ApiKeys
     *
     * @param  string $subaccount Email of the subaccount of which ApiKeys should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysGet'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ElasticEmail\Model\ApiKey[], HTTP status code, HTTP response headers (array of strings)
     */
    public function securityApikeysGetWithHttpInfo($subaccount = null, string $contentType = self::contentTypes['securityApikeysGet'][0])
    {
        $request = $this->securityApikeysGetRequest($subaccount, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ElasticEmail\Model\ApiKey[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ElasticEmail\Model\ApiKey[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ElasticEmail\Model\ApiKey[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ElasticEmail\Model\ApiKey[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ElasticEmail\Model\ApiKey[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation securityApikeysGetAsync
     *
     * List ApiKeys
     *
     * @param  string $subaccount Email of the subaccount of which ApiKeys should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityApikeysGetAsync($subaccount = null, string $contentType = self::contentTypes['securityApikeysGet'][0])
    {
        return $this->securityApikeysGetAsyncWithHttpInfo($subaccount, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation securityApikeysGetAsyncWithHttpInfo
     *
     * List ApiKeys
     *
     * @param  string $subaccount Email of the subaccount of which ApiKeys should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityApikeysGetAsyncWithHttpInfo($subaccount = null, string $contentType = self::contentTypes['securityApikeysGet'][0])
    {
        $returnType = '\ElasticEmail\Model\ApiKey[]';
        $request = $this->securityApikeysGetRequest($subaccount, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'securityApikeysGet'
     *
     * @param  string $subaccount Email of the subaccount of which ApiKeys should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function securityApikeysGetRequest($subaccount = null, string $contentType = self::contentTypes['securityApikeysGet'][0])
    {



        $resourcePath = '/security/apikeys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subaccount,
            'subaccount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation securityApikeysPost
     *
     * Add ApiKey
     *
     * @param  \ElasticEmail\Model\ApiKeyPayload $api_key_payload api_key_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysPost'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ElasticEmail\Model\NewApiKey
     */
    public function securityApikeysPost($api_key_payload, string $contentType = self::contentTypes['securityApikeysPost'][0])
    {
        list($response) = $this->securityApikeysPostWithHttpInfo($api_key_payload, $contentType);
        return $response;
    }

    /**
     * Operation securityApikeysPostWithHttpInfo
     *
     * Add ApiKey
     *
     * @param  \ElasticEmail\Model\ApiKeyPayload $api_key_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysPost'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ElasticEmail\Model\NewApiKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function securityApikeysPostWithHttpInfo($api_key_payload, string $contentType = self::contentTypes['securityApikeysPost'][0])
    {
        $request = $this->securityApikeysPostRequest($api_key_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\ElasticEmail\Model\NewApiKey' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ElasticEmail\Model\NewApiKey' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ElasticEmail\Model\NewApiKey', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ElasticEmail\Model\NewApiKey';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ElasticEmail\Model\NewApiKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation securityApikeysPostAsync
     *
     * Add ApiKey
     *
     * @param  \ElasticEmail\Model\ApiKeyPayload $api_key_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityApikeysPostAsync($api_key_payload, string $contentType = self::contentTypes['securityApikeysPost'][0])
    {
        return $this->securityApikeysPostAsyncWithHttpInfo($api_key_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation securityApikeysPostAsyncWithHttpInfo
     *
     * Add ApiKey
     *
     * @param  \ElasticEmail\Model\ApiKeyPayload $api_key_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securityApikeysPostAsyncWithHttpInfo($api_key_payload, string $contentType = self::contentTypes['securityApikeysPost'][0])
    {
        $returnType = '\ElasticEmail\Model\NewApiKey';
        $request = $this->securityApikeysPostRequest($api_key_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'securityApikeysPost'
     *
     * @param  \ElasticEmail\Model\ApiKeyPayload $api_key_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securityApikeysPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function securityApikeysPostRequest($api_key_payload, string $contentType = self::contentTypes['securityApikeysPost'][0])
    {

        // verify the required parameter 'api_key_payload' is set
        if ($api_key_payload === null || (is_array($api_key_payload) && count($api_key_payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key_payload when calling securityApikeysPost'
            );
        }


        $resourcePath = '/security/apikeys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_key_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_key_payload));
            } else {
                $httpBody = $api_key_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation securitySmtpByNameDelete
     *
     * Delete SMTP Credential
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  string $subaccount Email of the subaccount of which credential should be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNameDelete'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function securitySmtpByNameDelete($name, $subaccount = null, string $contentType = self::contentTypes['securitySmtpByNameDelete'][0])
    {
        $this->securitySmtpByNameDeleteWithHttpInfo($name, $subaccount, $contentType);
    }

    /**
     * Operation securitySmtpByNameDeleteWithHttpInfo
     *
     * Delete SMTP Credential
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  string $subaccount Email of the subaccount of which credential should be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNameDelete'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function securitySmtpByNameDeleteWithHttpInfo($name, $subaccount = null, string $contentType = self::contentTypes['securitySmtpByNameDelete'][0])
    {
        $request = $this->securitySmtpByNameDeleteRequest($name, $subaccount, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation securitySmtpByNameDeleteAsync
     *
     * Delete SMTP Credential
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  string $subaccount Email of the subaccount of which credential should be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNameDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securitySmtpByNameDeleteAsync($name, $subaccount = null, string $contentType = self::contentTypes['securitySmtpByNameDelete'][0])
    {
        return $this->securitySmtpByNameDeleteAsyncWithHttpInfo($name, $subaccount, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation securitySmtpByNameDeleteAsyncWithHttpInfo
     *
     * Delete SMTP Credential
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  string $subaccount Email of the subaccount of which credential should be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNameDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securitySmtpByNameDeleteAsyncWithHttpInfo($name, $subaccount = null, string $contentType = self::contentTypes['securitySmtpByNameDelete'][0])
    {
        $returnType = '';
        $request = $this->securitySmtpByNameDeleteRequest($name, $subaccount, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'securitySmtpByNameDelete'
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  string $subaccount Email of the subaccount of which credential should be deleted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNameDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function securitySmtpByNameDeleteRequest($name, $subaccount = null, string $contentType = self::contentTypes['securitySmtpByNameDelete'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling securitySmtpByNameDelete'
            );
        }



        $resourcePath = '/security/smtp/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subaccount,
            'subaccount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation securitySmtpByNameGet
     *
     * Load SMTP Credential
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  string $subaccount Email of the subaccount of which credential should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNameGet'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ElasticEmail\Model\SmtpCredentials
     */
    public function securitySmtpByNameGet($name, $subaccount = null, string $contentType = self::contentTypes['securitySmtpByNameGet'][0])
    {
        list($response) = $this->securitySmtpByNameGetWithHttpInfo($name, $subaccount, $contentType);
        return $response;
    }

    /**
     * Operation securitySmtpByNameGetWithHttpInfo
     *
     * Load SMTP Credential
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  string $subaccount Email of the subaccount of which credential should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNameGet'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ElasticEmail\Model\SmtpCredentials, HTTP status code, HTTP response headers (array of strings)
     */
    public function securitySmtpByNameGetWithHttpInfo($name, $subaccount = null, string $contentType = self::contentTypes['securitySmtpByNameGet'][0])
    {
        $request = $this->securitySmtpByNameGetRequest($name, $subaccount, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ElasticEmail\Model\SmtpCredentials' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ElasticEmail\Model\SmtpCredentials' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ElasticEmail\Model\SmtpCredentials', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ElasticEmail\Model\SmtpCredentials';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ElasticEmail\Model\SmtpCredentials',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation securitySmtpByNameGetAsync
     *
     * Load SMTP Credential
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  string $subaccount Email of the subaccount of which credential should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securitySmtpByNameGetAsync($name, $subaccount = null, string $contentType = self::contentTypes['securitySmtpByNameGet'][0])
    {
        return $this->securitySmtpByNameGetAsyncWithHttpInfo($name, $subaccount, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation securitySmtpByNameGetAsyncWithHttpInfo
     *
     * Load SMTP Credential
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  string $subaccount Email of the subaccount of which credential should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securitySmtpByNameGetAsyncWithHttpInfo($name, $subaccount = null, string $contentType = self::contentTypes['securitySmtpByNameGet'][0])
    {
        $returnType = '\ElasticEmail\Model\SmtpCredentials';
        $request = $this->securitySmtpByNameGetRequest($name, $subaccount, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'securitySmtpByNameGet'
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  string $subaccount Email of the subaccount of which credential should be loaded (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function securitySmtpByNameGetRequest($name, $subaccount = null, string $contentType = self::contentTypes['securitySmtpByNameGet'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling securitySmtpByNameGet'
            );
        }



        $resourcePath = '/security/smtp/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subaccount,
            'subaccount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation securitySmtpByNamePut
     *
     * Update SMTP Credential
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  \ElasticEmail\Model\SmtpCredentialsPayload $smtp_credentials_payload smtp_credentials_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNamePut'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ElasticEmail\Model\SmtpCredentials
     */
    public function securitySmtpByNamePut($name, $smtp_credentials_payload, string $contentType = self::contentTypes['securitySmtpByNamePut'][0])
    {
        list($response) = $this->securitySmtpByNamePutWithHttpInfo($name, $smtp_credentials_payload, $contentType);
        return $response;
    }

    /**
     * Operation securitySmtpByNamePutWithHttpInfo
     *
     * Update SMTP Credential
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  \ElasticEmail\Model\SmtpCredentialsPayload $smtp_credentials_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNamePut'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ElasticEmail\Model\SmtpCredentials, HTTP status code, HTTP response headers (array of strings)
     */
    public function securitySmtpByNamePutWithHttpInfo($name, $smtp_credentials_payload, string $contentType = self::contentTypes['securitySmtpByNamePut'][0])
    {
        $request = $this->securitySmtpByNamePutRequest($name, $smtp_credentials_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ElasticEmail\Model\SmtpCredentials' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ElasticEmail\Model\SmtpCredentials' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ElasticEmail\Model\SmtpCredentials', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ElasticEmail\Model\SmtpCredentials';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ElasticEmail\Model\SmtpCredentials',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation securitySmtpByNamePutAsync
     *
     * Update SMTP Credential
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  \ElasticEmail\Model\SmtpCredentialsPayload $smtp_credentials_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securitySmtpByNamePutAsync($name, $smtp_credentials_payload, string $contentType = self::contentTypes['securitySmtpByNamePut'][0])
    {
        return $this->securitySmtpByNamePutAsyncWithHttpInfo($name, $smtp_credentials_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation securitySmtpByNamePutAsyncWithHttpInfo
     *
     * Update SMTP Credential
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  \ElasticEmail\Model\SmtpCredentialsPayload $smtp_credentials_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securitySmtpByNamePutAsyncWithHttpInfo($name, $smtp_credentials_payload, string $contentType = self::contentTypes['securitySmtpByNamePut'][0])
    {
        $returnType = '\ElasticEmail\Model\SmtpCredentials';
        $request = $this->securitySmtpByNamePutRequest($name, $smtp_credentials_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'securitySmtpByNamePut'
     *
     * @param  string $name Name of the SMTP Credential (required)
     * @param  \ElasticEmail\Model\SmtpCredentialsPayload $smtp_credentials_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpByNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function securitySmtpByNamePutRequest($name, $smtp_credentials_payload, string $contentType = self::contentTypes['securitySmtpByNamePut'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling securitySmtpByNamePut'
            );
        }

        // verify the required parameter 'smtp_credentials_payload' is set
        if ($smtp_credentials_payload === null || (is_array($smtp_credentials_payload) && count($smtp_credentials_payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smtp_credentials_payload when calling securitySmtpByNamePut'
            );
        }


        $resourcePath = '/security/smtp/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($smtp_credentials_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($smtp_credentials_payload));
            } else {
                $httpBody = $smtp_credentials_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation securitySmtpGet
     *
     * List SMTP Credentials
     *
     * @param  string $subaccount Email of the subaccount of which credentials should be listed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpGet'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ElasticEmail\Model\SmtpCredentials[]
     */
    public function securitySmtpGet($subaccount = null, string $contentType = self::contentTypes['securitySmtpGet'][0])
    {
        list($response) = $this->securitySmtpGetWithHttpInfo($subaccount, $contentType);
        return $response;
    }

    /**
     * Operation securitySmtpGetWithHttpInfo
     *
     * List SMTP Credentials
     *
     * @param  string $subaccount Email of the subaccount of which credentials should be listed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpGet'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ElasticEmail\Model\SmtpCredentials[], HTTP status code, HTTP response headers (array of strings)
     */
    public function securitySmtpGetWithHttpInfo($subaccount = null, string $contentType = self::contentTypes['securitySmtpGet'][0])
    {
        $request = $this->securitySmtpGetRequest($subaccount, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ElasticEmail\Model\SmtpCredentials[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ElasticEmail\Model\SmtpCredentials[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ElasticEmail\Model\SmtpCredentials[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ElasticEmail\Model\SmtpCredentials[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ElasticEmail\Model\SmtpCredentials[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation securitySmtpGetAsync
     *
     * List SMTP Credentials
     *
     * @param  string $subaccount Email of the subaccount of which credentials should be listed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securitySmtpGetAsync($subaccount = null, string $contentType = self::contentTypes['securitySmtpGet'][0])
    {
        return $this->securitySmtpGetAsyncWithHttpInfo($subaccount, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation securitySmtpGetAsyncWithHttpInfo
     *
     * List SMTP Credentials
     *
     * @param  string $subaccount Email of the subaccount of which credentials should be listed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securitySmtpGetAsyncWithHttpInfo($subaccount = null, string $contentType = self::contentTypes['securitySmtpGet'][0])
    {
        $returnType = '\ElasticEmail\Model\SmtpCredentials[]';
        $request = $this->securitySmtpGetRequest($subaccount, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'securitySmtpGet'
     *
     * @param  string $subaccount Email of the subaccount of which credentials should be listed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function securitySmtpGetRequest($subaccount = null, string $contentType = self::contentTypes['securitySmtpGet'][0])
    {



        $resourcePath = '/security/smtp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subaccount,
            'subaccount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation securitySmtpPost
     *
     * Add SMTP Credential
     *
     * @param  \ElasticEmail\Model\SmtpCredentialsPayload $smtp_credentials_payload smtp_credentials_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpPost'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ElasticEmail\Model\NewSmtpCredentials
     */
    public function securitySmtpPost($smtp_credentials_payload, string $contentType = self::contentTypes['securitySmtpPost'][0])
    {
        list($response) = $this->securitySmtpPostWithHttpInfo($smtp_credentials_payload, $contentType);
        return $response;
    }

    /**
     * Operation securitySmtpPostWithHttpInfo
     *
     * Add SMTP Credential
     *
     * @param  \ElasticEmail\Model\SmtpCredentialsPayload $smtp_credentials_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpPost'] to see the possible values for this operation
     *
     * @throws \ElasticEmail\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ElasticEmail\Model\NewSmtpCredentials, HTTP status code, HTTP response headers (array of strings)
     */
    public function securitySmtpPostWithHttpInfo($smtp_credentials_payload, string $contentType = self::contentTypes['securitySmtpPost'][0])
    {
        $request = $this->securitySmtpPostRequest($smtp_credentials_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\ElasticEmail\Model\NewSmtpCredentials' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ElasticEmail\Model\NewSmtpCredentials' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ElasticEmail\Model\NewSmtpCredentials', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ElasticEmail\Model\NewSmtpCredentials';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ElasticEmail\Model\NewSmtpCredentials',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation securitySmtpPostAsync
     *
     * Add SMTP Credential
     *
     * @param  \ElasticEmail\Model\SmtpCredentialsPayload $smtp_credentials_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securitySmtpPostAsync($smtp_credentials_payload, string $contentType = self::contentTypes['securitySmtpPost'][0])
    {
        return $this->securitySmtpPostAsyncWithHttpInfo($smtp_credentials_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation securitySmtpPostAsyncWithHttpInfo
     *
     * Add SMTP Credential
     *
     * @param  \ElasticEmail\Model\SmtpCredentialsPayload $smtp_credentials_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function securitySmtpPostAsyncWithHttpInfo($smtp_credentials_payload, string $contentType = self::contentTypes['securitySmtpPost'][0])
    {
        $returnType = '\ElasticEmail\Model\NewSmtpCredentials';
        $request = $this->securitySmtpPostRequest($smtp_credentials_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'securitySmtpPost'
     *
     * @param  \ElasticEmail\Model\SmtpCredentialsPayload $smtp_credentials_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['securitySmtpPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function securitySmtpPostRequest($smtp_credentials_payload, string $contentType = self::contentTypes['securitySmtpPost'][0])
    {

        // verify the required parameter 'smtp_credentials_payload' is set
        if ($smtp_credentials_payload === null || (is_array($smtp_credentials_payload) && count($smtp_credentials_payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smtp_credentials_payload when calling securitySmtpPost'
            );
        }


        $resourcePath = '/security/smtp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($smtp_credentials_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($smtp_credentials_payload));
            } else {
                $httpBody = $smtp_credentials_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
